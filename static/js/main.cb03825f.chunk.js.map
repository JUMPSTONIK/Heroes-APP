{"version":3,"sources":["helpers/storeContext.ts","components/Card.tsx","components/ListHeroesSection.tsx","components/CardLoader.tsx","components/EmptySection.tsx","components/FavoriteSection.tsx","components/HeroesPage.tsx","helpers/getHeroes.ts","store/heroes-store.ts","index.tsx"],"names":["StoreContext","createContext","StoreProvider","Provider","Card","props","backgroundtext","backgroundImage","hero","image","store","useContext","cardContainerRef","useRef","useEffect","current","classList","add","useObserver","ref","className","getListOfIds","length","id","style","src","alt","type","onClick","isFavorite","window","scroll","offsetLeft","offsetTop","handleFavorite","name","realName","powerStat","ListHeroesSection","useState","height","width","dimensions","setDimensions","listofCard","useMemo","listOfDataCards","map","superHero","toString","reactWindowContainerRef","offsetHeight","offsetWidth","cols","Math","trunc","rows","handleResize","addEventListener","removeEventListener","columnCount","columnWidth","Infinity","innerHeight","rowCount","rowHeight","columnIndex","rowIndex","CardLoader","section","CardCount","innerWidth","speed","backgroundColor","foregroundColor","x","y","rx","ry","Array","fill","_","i","EmptySection","FavoriteSection","ListofCard","favoriteHeroeslist","HeroesPage","observer","collapse","setCollapse","areHeroesLoaded","setAreHeroesLoaded","listOfHeroes","idsList","GeneralAndFavoriteList","favoriteList","placeholder","onChange","event","setSearchingHero","target","value","searchHeroesList","getHeroes","a","fetch","response","json","forEach","element","powerstats","calcPower","combat","durability","intelligence","power","strength","biography","fullName","images","md","parseFloat","toFixed","push","console","log","HeroesStore","searchedHero","listOfIds","localStorage","getItem","JSON","parse","this","makeAutoObservable","getHeroesList","flow","autoBind","includes","newIdsList","filter","setItem","stringify","generalHeroesList","elem","generalList","sort","heroA","heroB","indexOf","divRoot","document","querySelector","heroesStore","ReactDOM","render"],"mappings":"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","file":"static/js/main.cb03825f.chunk.js","sourcesContent":["import { createContext } from \"react\";\nimport HeroesStore from \"../store/heroes-store\";\n\nexport const StoreContext = createContext<HeroesStore>({} as HeroesStore);\nexport const StoreProvider = StoreContext.Provider;\n","import CSS from \"csstype\";\nimport { HeroCardData } from \"../helpers/getHeroes\";\nimport { useObserver } from \"mobx-react-lite\";\nimport { useEffect, useRef, useContext } from \"react\";\nimport { StoreContext } from \"../helpers/storeContext\";\n\ninterface CardProps {\n    hero: HeroCardData;\n    isFavorite: boolean;\n}\n\nconst Card = (props: CardProps) => {\n    const backgroundtext: CSS.Properties = {\n        backgroundImage: `url(${props.hero.image})`,\n    };\n\n    const store = useContext(StoreContext);\n\n    const cardContainerRef = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        cardContainerRef.current?.classList.add(\n            \"animate__animated\",\n            \"animate__fadeIn\"\n        );\n    }, []);\n\n    return useObserver(() => (\n        <>\n            <div\n                ref={cardContainerRef}\n                className={`card-container ${\n                    store.getListOfIds[store.getListOfIds.length - 1] ===\n                    props.hero.id\n                        ? \"liked-recently\"\n                        : \"\"\n                }`}\n            >\n                <div className=\"card-background\">\n                    <div\n                        className=\"background-image\"\n                        style={backgroundtext}\n                    ></div>\n                    <div className=\"card\">\n                        <div className=\"heroesPicture\">\n                            <img\n                                className=\"hero\"\n                                src={props.hero.image}\n                                alt=\"\"\n                            />\n                            <div className=\"backgroundFavoriteButton\"></div>\n                            <button\n                                className=\"favorite-button\"\n                                type=\"submit\"\n                                onClick={() => {\n                                    if (!props.isFavorite) {\n                                        window.scroll(\n                                            cardContainerRef.current\n                                                ?.offsetLeft!,\n                                            cardContainerRef.current?.offsetTop!\n                                        );\n                                    }\n\n                                    store.handleFavorite(props.hero);\n                                }}\n                            >\n                                <img\n                                    className={\n                                        props.isFavorite\n                                            ? \"mediumHeart-filled\"\n                                            : \"mediumHeart\"\n                                    }\n                                    src={\n                                        props.isFavorite\n                                            ? \"./assets/medium-filled-heart/medium-filled-heart.svg\"\n                                            : \"./assets/small-heart/small-heart.svg\"\n                                    }\n                                    alt=\"little heart\"\n                                />\n                            </button>\n                        </div>\n                        <div className=\"heroesContent\">\n                            <div className=\"heroes-nickname\">\n                                {props.hero.name}\n                            </div>\n\n                            <div className=\"realName\">\n                                Real Name: {props.hero.realName}\n                            </div>\n                            <div className=\"rank-space\">\n                                <img\n                                    className=\"fist\"\n                                    src=\"./assets/fist/fist.svg\"\n                                    alt=\"fist of ranking\"\n                                />\n                                <div className=\"rank\">\n                                    <strong>{props.hero.powerStat}</strong> / 10\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    ));\n};\n\n// Card.protoTypes = {\n//     name: PropTypes.string.isRequired,\n//     realName: PropTypes.string.isRequired,\n//     image: PropTypes.string.isRequired,\n//     powerStat: PropTypes.number.isRequired,\n// };\n\nexport default Card;\n","import { CSSProperties, useEffect, useMemo, useRef, useState } from \"react\";\nimport { HeroCardData } from \"../helpers/getHeroes\";\nimport { FixedSizeGrid as Grid } from \"react-window\";\nimport Card from \"./Card\";\n\ninterface ListHeroesSectionProps {\n    listOfDataCards: HeroCardData[];\n}\n\ninterface properties {\n    columnIndex: number;\n    rowIndex: number;\n    style: CSSProperties;\n}\nconst ListHeroesSection = (props: ListHeroesSectionProps) => {\n    const [dimensions, setDimensions] = useState({\n        height: 0,\n        width: 0,\n    });\n\n    const listofCard = useMemo(\n        () =>\n            props.listOfDataCards.map((superHero) => (\n                <Card\n                    key={superHero.id.toString()}\n                    hero={superHero}\n                    isFavorite={false}\n                />\n            )),\n        [props]\n    );\n\n    const reactWindowContainerRef = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        setDimensions({\n            height: reactWindowContainerRef.current?.offsetHeight!,\n            width: reactWindowContainerRef.current?.offsetWidth!,\n        });\n        // reactWindowContainerRef.current?.classList.add(\n        //     \"animate__animated\",\n        //     \"animate__fadeIn\"\n        // );\n    }, []);\n\n    const cols = useMemo(\n        () => Math.trunc((dimensions.width - 22) / 336),\n        [dimensions.width]\n    );\n    // console.log(cols);\n    const rows = useMemo(\n        () =>\n            dimensions.width === 0\n                ? 0\n                : Math.trunc(\n                      listofCard.length / Math.trunc(dimensions.width / 336)\n                  ),\n        [dimensions.width, listofCard.length]\n    );\n\n    // console.log(rows);\n\n    useEffect(() => {\n        const handleResize = () => {\n            setDimensions({\n                height: reactWindowContainerRef.current?.offsetHeight!,\n                width: reactWindowContainerRef.current?.offsetWidth!,\n            });\n        };\n        window.addEventListener(\"resize\", handleResize);\n        return () => {\n            window.removeEventListener(\"resize\", handleResize);\n        };\n    }, []);\n\n    const Cell = ({ columnIndex, rowIndex, style }: properties) => (\n        <div\n            style={{\n                ...style,\n                width: `${Math.trunc(\n                    dimensions.width * (dimensions.width / (336 * cols))\n                )}`,\n            }}\n        >\n            {listofCard[rowIndex * cols + columnIndex]}\n        </div>\n    );\n\n    return (\n        <>\n            <div ref={reactWindowContainerRef} className=\"list-heroes-section\">\n                <Grid\n                    className=\"grid-conteiner\"\n                    columnCount={cols > 0 ? cols : 1}\n                    columnWidth={336}\n                    height={\n                        Math.trunc(dimensions.height) !== Infinity\n                            ? Math.trunc(dimensions.height)\n                            : window.innerHeight\n                    }\n                    rowCount={rows > 0 ? rows + 1 : listofCard.length}\n                    rowHeight={222}\n                    width={Math.trunc(\n                        dimensions.width *\n                            (dimensions.width / (336 * (cols - 3)))\n                    )}\n                    style={{ width: \"\" }}\n                >\n                    {Cell}\n                </Grid>\n            </div>\n        </>\n    );\n};\n\nexport default ListHeroesSection;\n","import ContentLoader from \"react-content-loader\";\n\ninterface sectionprop {\n    section: string;\n}\n\nexport const CardLoader = (section: sectionprop) => {\n    // console.log(section);\n    const CardCount = Math.trunc((window.innerWidth * 0.9) / 317);\n    // console.log(CardCount);\n\n    return (\n        <ContentLoader\n            height={section.section !== \"general\" ? 400 : 550}\n            speed={2}\n            backgroundColor=\"#6A4DBC\"\n            foregroundColor=\"#ecebeb\"\n            style={{ width: \"100%\" }}\n        >\n            <rect x=\"16\" y=\"60\" rx=\"5\" ry=\"5\" width=\"200\" height=\"42\" />\n            {new Array(CardCount).fill(\" \").map((_, i) => {\n                return (\n                    <rect\n                        key={i}\n                        x={`${333 * i + 70}`}\n                        y=\"130\"\n                        rx=\"5\"\n                        ry=\"5\"\n                        width=\"317\"\n                        height=\"174\"\n                    />\n                );\n            })}\n\n            {section.section === \"general\" &&\n                new Array(CardCount).fill(\" \").map((_, i) => {\n                    return (\n                        <rect\n                            key={i}\n                            x={`${333 * i + 70}`}\n                            y=\"320\"\n                            rx=\"5\"\n                            ry=\"5\"\n                            width=\"317\"\n                            height=\"174\"\n                        />\n                    );\n                })}\n        </ContentLoader>\n    );\n};\n","import React from \"react\";\n\nexport const EmptySection = () => {\n  return (\n    <>\n      <img\n        className=\"big-heart\"\n        src=\"./assets/big-heart/big-heart.svg\"\n        alt=\"big heart\"\n      />\n      <p className=\"favorite-text\">You haven't liked any superhero yet</p>\n    </>\n  );\n};\n","// import React, { useState } from \"react\";\n// import PropTypes from \"prop-types\";\nimport { HeroCardData } from \"../helpers/getHeroes\";\nimport Card from \"./Card\";\nimport { EmptySection } from \"./EmptySection\";\n// interface CounterAppProps {\n//   value: number;\n// }\n\ninterface FavoriteSectioProps {\n    favoriteHeroeslist: HeroCardData[];\n}\n\nconst FavoriteSection = (props: FavoriteSectioProps) => {\n    const ListofCard = props.favoriteHeroeslist.map((superHero) => (\n        // Correcto! La key debería ser especificada dentro del array.\n        <Card\n            key={superHero.id.toString()}\n            hero={superHero}\n            isFavorite={true}\n        />\n    ));\n\n    return (\n        <>\n            <div\n                className={` animate__fadeInDown ${\n                    ListofCard.length === 0\n                        ? \"Favorite-section\"\n                        : \"favorite-heroes-section\"\n                }`}\n            >\n                {ListofCard.length === 0 ? <EmptySection /> : ListofCard}\n            </div>\n        </>\n    );\n};\n\n// CounterApp.propTypes = {\n//   value: PropTypes.number,\n// };\n\nexport default FavoriteSection;\n","import { useEffect, useState, useContext } from \"react\";\nimport ListHeroesSection from \"./ListHeroesSection\";\nimport { CardLoader } from \"./CardLoader\";\n\nimport { observer } from \"mobx-react-lite\";\nimport { StoreContext } from \"../helpers/storeContext\";\nimport FavoriteSection from \"./FavoriteSection\";\n\nconst HeroesPage = observer(() => {\n    const [collapse, setCollapse] = useState(true);\n    const [areHeroesLoaded, setAreHeroesLoaded] = useState(false);\n    const store = useContext(StoreContext);\n\n    useEffect(() => {\n        if (store.listOfHeroes !== []) setAreHeroesLoaded(true);\n    }, [store.idsList, store.listOfHeroes]);\n\n    const handleCollapseButton = () => {\n        setCollapse(!collapse);\n    };\n\n    return (\n        <>\n            <div className=\"content\">\n                <div className=\"logo-section\">\n                    <img className=\"logo\" src=\"./assets/logo/logo.svg\" alt=\"\" />\n                </div>\n                <div\n                    className={\n                        !areHeroesLoaded\n                            ? \"display-loader-section\"\n                            : \"display-favorites-section\"\n                    }\n                >\n                    {areHeroesLoaded ? (\n                        <>\n                            <div className=\"upper-section\">\n                                <div className=\"liked-space\">\n                                    <div className=\"little-favorite-button\">\n                                        <img\n                                            className=\"littleHeart\"\n                                            src=\"./assets/small-heart/small-heart.svg\"\n                                            alt=\"little heart\"\n                                        />\n                                    </div>\n                                    <p className=\"liked-text\">Liked</p>\n                                </div>\n                                <button\n                                    className={\n                                        collapse\n                                            ? \"display-button\"\n                                            : \"display-button-rotated\"\n                                    }\n                                    onClick={handleCollapseButton}\n                                >\n                                    <img\n                                        src=\"./assets/arrow-up/arrow-up.svg\"\n                                        alt=\"arrow up\"\n                                    />\n                                </button>\n                            </div>\n                            {collapse && (\n                                <FavoriteSection\n                                    favoriteHeroeslist={\n                                        store.GeneralAndFavoriteList\n                                            .favoriteList\n                                    }\n                                />\n                            )}\n                        </>\n                    ) : (\n                        <CardLoader section={\"\"} />\n                    )}\n                </div>\n                <div className=\"search-and-general-section\">\n                    {areHeroesLoaded ? (\n                        <>\n                            <div className=\"search-heroes-section\">\n                                <p className=\"search-title\">All superheroes</p>\n                                <div className=\"search-bar-element\">\n                                    <img\n                                        src=\"./assets/search/search.svg\"\n                                        alt=\"\"\n                                    />\n                                    <input\n                                        className=\"search-input\"\n                                        type=\"text\"\n                                        placeholder=\"Search\"\n                                        onChange={(event) =>\n                                            (store.setSearchingHero =\n                                                event.target.value)\n                                        }\n                                    />\n                                </div>\n                            </div>\n                            <ListHeroesSection\n                                listOfDataCards={store.searchHeroesList}\n                            />\n                        </>\n                    ) : (\n                        <CardLoader section={\"general\"} />\n                    )}\n                </div>\n            </div>\n        </>\n    );\n});\n\nexport default HeroesPage;\n","export interface HeroCardData {\n    id: number;\n    name: string;\n    realName: string;\n    image: string;\n    powerStat: number;\n}\n\nexport interface SuperHero {\n    id: number;\n    name: string;\n    powerstats: {\n        intelligence: number;\n        combat: number;\n        durability: number;\n        power: number;\n        speed: number;\n        strength: number;\n    };\n    biography: {\n        fullName: string;\n    };\n    images: {\n        md: string;\n    };\n}\n\nexport const getHeroes = async () => {\n    let listOfHeroes: HeroCardData[] = [];\n\n    try {\n        const apiKey = \"akabab.github.io/superhero-api/api/all.json \";\n        const response = await fetch(\n            `https://cors-anywhere.herokuapp.com/${apiKey}`\n        );\n\n        // response.then((resp) => {\n\n        const data = await response.json();\n\n        // console.log(data);\n\n        data.forEach((element: SuperHero) => {\n            const { combat, durability, intelligence, power, speed, strength } =\n                element.powerstats;\n            const calcPower: number =\n                (combat +\n                    durability +\n                    intelligence +\n                    power +\n                    speed +\n                    strength) /\n                60;\n            // console.log(element.biography.fullname)\n            const hero: HeroCardData = {\n                id: element.id,\n                name: element.name,\n                realName: element.biography.fullName,\n                image: element.images.md,\n                powerStat: parseFloat(calcPower.toFixed(2)),\n            };\n\n            listOfHeroes.push(hero);\n        });\n        // });\n        // });\n    } catch (error) {\n        // manejo del error\n        console.log(error);\n    }\n\n    return listOfHeroes;\n};\n","import { flow, makeAutoObservable } from \"mobx\";\nimport { getHeroes, HeroCardData } from \"../helpers/getHeroes\";\n\nexport default class HeroesStore {\n    listOfHeroes: HeroCardData[] = [];\n    idsList: number[] = [];\n    searchedHero = \"\";\n\n    constructor() {\n        const listOfIds = localStorage.getItem(\"ids\")\n            ? JSON.parse(localStorage.getItem(\"ids\")!)\n            : [];\n        this.idsList = listOfIds;\n        makeAutoObservable(\n            this,\n            {\n                getHeroesList: flow,\n            },\n            { autoBind: true }\n        );\n        this.getHeroesList();\n    }\n\n    handleFavorite(hero: HeroCardData) {\n        if (!this.idsList.includes(hero.id)) {\n            const listOfIds = localStorage.getItem(\"ids\")\n                ? JSON.parse(localStorage.getItem(\"ids\")!)\n                : [];\n\n            listOfIds.push(hero.id);\n            localStorage.setItem(\"ids\", JSON.stringify(listOfIds));\n            this.idsList = listOfIds;\n        } else {\n            const listOfIds = localStorage.getItem(\"ids\")\n                ? JSON.parse(localStorage.getItem(\"ids\")!)\n                : [];\n\n            const newIdsList = listOfIds.filter((id: number) => {\n                return id !== hero.id;\n            });\n\n            this.idsList = newIdsList;\n            localStorage.setItem(\"ids\", JSON.stringify(newIdsList));\n        }\n    }\n\n    get GeneralAndFavoriteList() {\n        let generalHeroesList: HeroCardData[] = [];\n        let favoriteHeroeslist: HeroCardData[] = [];\n\n        this.listOfHeroes.forEach((elem) => {\n            if (!this.idsList.includes(elem.id)) {\n                generalHeroesList.push(elem);\n            } else {\n                favoriteHeroeslist.push(elem);\n            }\n        });\n        return {\n            generalList: generalHeroesList,\n            favoriteList: favoriteHeroeslist.sort(\n                (heroA, heroB) =>\n                    this.idsList.indexOf(heroB.id) -\n                    this.idsList.indexOf(heroA.id)\n            ),\n        };\n    }\n\n    get searchHeroesList() {\n        return this.GeneralAndFavoriteList.generalList.filter((hero) => {\n            return (\n                (hero.name.includes(this.searchedHero) ||\n                    hero.realName.includes(this.searchedHero)) &&\n                !this.idsList.includes(hero.id)\n            );\n        });\n    }\n\n    *getHeroesList() {\n        this.listOfHeroes = yield getHeroes();\n    }\n\n    set setSearchingHero(name: string) {\n        this.searchedHero = name;\n    }\n\n    get getListOfIds() {\n        return this.idsList;\n    }\n}\n","// import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport HeroesPage from \"./components/HeroesPage\";\nimport HeroesStore from \"./store/heroes-store\";\nimport { StoreProvider } from \"./helpers/storeContext\";\n\nconst divRoot = document.querySelector(\"#root\");\nconst heroesStore = new HeroesStore();\n\nReactDOM.render(\n    <StoreProvider value={heroesStore}>\n        <HeroesPage />\n    </StoreProvider>,\n    divRoot\n);\n"],"sourceRoot":""}